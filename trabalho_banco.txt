#include<stdlib.h>
#include<stdio.h>
#include<pthread.h>

int NUM_VALORES;
int NUM_THREADS;

int numero_atual;
int numeros_primos_encontrados;
pthread_mutex_t lock;

int e_primo(int n)
{
	int i, m = 0;
	m = n/2;
	if(n == 0 || n == 1) {
		return 0;
	} else {
		for(i = 2; i <= m; i++) {
			if(n %i == 0)
				return 0;
		}
	}
	return 1;
}

void *thread_funcao(void *arg1)
{
	while(numero_atual < (NUM_VALORES-1))
	{
		pthread_mutex_lock(&lock);
		
		int *thread_id = (int *)arg1;
		int bool_primo = e_primo(numero_atual);

		if(bool_primo) numeros_primos_encontrados++;

		printf("Thread %d: O numero %d%s e primo\n", *thread_id, numero_atual, (bool_primo) ? "" : " nao");

		numero_atual++;

		pthread_mutex_unlock(&lock);
		// pthread_exit(NULL);
	}
}

int main()
{
	printf("Informe a quantidade de números que deseja verificar: ");
	scanf("%d", &NUM_VALORES);

	printf("Informe o número de threads a serem criadas: ");
	scanf("%d", &NUM_THREADS);

	//	=================================================	//

	pthread_t thread_id[NUM_THREADS];
 	numero_atual = 1;
 	numeros_primos_encontrados = 0;

 	if( pthread_mutex_init(&lock, NULL) != 0){
 		fprintf(stderr, "Erro ao criar mutex.\n");
 		exit(EXIT_FAILURE);
 	}
 	//	=================================================	//

 	int i, k;
 	for(k = 0; k < NUM_THREADS; k++)
		pthread_create(&thread_id[k], NULL, thread_funcao, (void *)&thread_id[k]);

	for(k = 0; k < NUM_THREADS; k++)
		pthread_join(thread_id[k], NULL);

 	printf("O numero total de numeros primos encontrados foi: %d", numeros_primos_encontrados);

	//	=================================================	//

	pthread_mutex_destroy(&lock);

	return 0;
}